version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lmax-postgres
    environment:
      POSTGRES_DB: lmax_exchange
      POSTGRES_USER: lmax_user
      POSTGRES_PASSWORD: lmax_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lmax_user -d lmax_exchange"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - lmax-network
    restart: unless-stopped

  # LMAX Exchange Application
  lmax-exchange:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lmax-exchange
    ports:
      - "8080:8080"
      - "9999:9999" # JMX port
      - "9998:9998" # JMX RMI port
    environment:
      - DB_URL=jdbc:postgresql://postgres:5432/lmax_exchange
      - DB_USERNAME=lmax_user
      - DB_PASSWORD=lmax_password
      - JAVA_OPTS=-server -Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+UseStringDeduplication -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.local.only=false
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - lmax-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Performance Testing with wrk
  wrk-tester:
    image: williamyeh/wrk
    container_name: lmax-wrk
    depends_on:
      lmax-exchange:
        condition: service_healthy
    networks:
      - lmax-network
    profiles:
      - testing
    volumes:
      - ./docker/wrk-scripts:/scripts
    working_dir: /scripts

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lmax-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - lmax-network
    profiles:
      - monitoring

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lmax-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana-datasources:/etc/grafana/provisioning/datasources
    networks:
      - lmax-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lmax-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
